* DEBUG: Parseando fichero: big-example.txt con 19 frases.

Loading parser from serialized file englishPCFG.ser.gz ... done [2.3 sec].

* DEBUG: Parseando frase 1 de 19

[det(Project-3, The-1), nn(Project-3, Debian-2), nsubj(association-6, Project-3), cop(association-6, is-4), det(association-6, an-5), prep_of(association-6, individuals-8), nsubj(made-11, who-9), aux(made-11, have-10), rcmod(individuals-8, made-11), amod(cause-13, common-12), dobj(made-11, cause-13), aux(create-15, to-14), xcomp(made-11, create-15), det(system-19, a-16), amod(system-19, free-17), amod(system-19, operating-18), dobj(create-15, system-19)]

* DEBUG: Imprimiendo salida en formato oneline

(ROOT (S (NP (DT The) (NNP Debian) (NNP Project)) (VP (VBZ is) (NP (NP (DT an) (NN association)) (PP (IN of) (NP (NP (NNS individuals)) (SBAR (WHNP (WP who)) (S (VP (VBP have) (VP (VBN made) (NP (JJ common) (NN cause)) (S (VP (TO to) (VP (VB create) (NP (DT a) (JJ free) (VBG operating) (NN system))))))))))))) (. .)))

* DEBUG: Imprimiendo salida en formato penn

(ROOT
  (S
    (NP (DT The) (NNP Debian) (NNP Project))
    (VP (VBZ is)
      (NP
        (NP (DT an) (NN association))
        (PP (IN of)
          (NP
            (NP (NNS individuals))
            (SBAR
              (WHNP (WP who))
              (S
                (VP (VBP have)
                  (VP (VBN made)
                    (NP (JJ common) (NN cause))
                    (S
                      (VP (TO to)
                        (VP (VB create)
                          (NP (DT a) (JJ free) (VBG operating) (NN system)))))))))))))
    (. .)))


* DEBUG: Imprimiendo salida en formato latexTree

.[
ROOT
  S
    NP
      DT
        The
      NNP
        Debian
      NNP
        Project
    VP
      VBZ
        is
      NP
        NP
          DT
            an
          NN
            association
        PP
          IN
            of
          NP
            NP
              NNS
                individuals
            SBAR
              WHNP
                WP
                  who
              S
                VP
                  VBP
                    have
                  VP
                    VBN
                      made
                    NP
                      JJ
                        common
                      NN
                        cause
                    S
                      VP
                        TO
                          to
                        VP
                          VB
                            create
                          NP
                            DT
                              a
                            JJ
                              free
                            VBG
                              operating
                            NN
                              system
    .
      .
.]

* DEBUG: Imprimiendo salida en formato words

The Debian Project is an association of individuals who have made common cause to create a free operating system .


* DEBUG: Imprimiendo salida en formato wordsAndTags

The/DT Debian/NNP Project/NNP is/VBZ an/DT association/NN of/IN individuals/NNS who/WP have/VBP made/VBN common/JJ cause/NN to/TO create/VB a/DT free/JJ operating/VBG system/NN ./.


* DEBUG: Imprimiendo salida en formato rootSymbolOnly

ROOT

* DEBUG: Imprimiendo salida en formato dependencies

dep(Project-3,The-1)
dep(Project-3,Debian-2)
dep(is-4,Project-3)
dep(association-6,an-5)
dep(is-4,association-6)
dep(association-6,of-7)
dep(of-7,individuals-8)
dep(individuals-8,who-9)
dep(who-9,have-10)
dep(have-10,made-11)
dep(cause-13,common-12)
dep(made-11,cause-13)
dep(made-11,to-14)
dep(to-14,create-15)
dep(system-19,a-16)
dep(system-19,free-17)
dep(system-19,operating-18)
dep(create-15,system-19)


* DEBUG: Imprimiendo salida en formato typedDependencies

det(Project-3, The-1)
nn(Project-3, Debian-2)
nsubj(association-6, Project-3)
cop(association-6, is-4)
det(association-6, an-5)
prep(association-6, of-7)
pobj(of-7, individuals-8)
nsubj(made-11, who-9)
aux(made-11, have-10)
rcmod(individuals-8, made-11)
amod(cause-13, common-12)
dobj(made-11, cause-13)
aux(create-15, to-14)
xcomp(made-11, create-15)
det(system-19, a-16)
amod(system-19, free-17)
amod(system-19, operating-18)
dobj(create-15, system-19)



* DEBUG: Imprimiendo salida en formato typedDependenciesCollapsed

det(Project-3, The-1)
nn(Project-3, Debian-2)
nsubj(association-6, Project-3)
cop(association-6, is-4)
det(association-6, an-5)
prep_of(association-6, individuals-8)
nsubj(made-11, who-9)
aux(made-11, have-10)
rcmod(individuals-8, made-11)
amod(cause-13, common-12)
dobj(made-11, cause-13)
aux(create-15, to-14)
xcomp(made-11, create-15)
det(system-19, a-16)
amod(system-19, free-17)
amod(system-19, operating-18)
dobj(create-15, system-19)


* DEBUG: Parseando frase 2 de 19

[det(system-3, This-1), amod(system-3, operating-2), nsubjpass(called-9, system-3), complm(created-7, that-4), nsubj(created-7, we-5), aux(created-7, have-6), dep(system-3, created-7), auxpass(called-9, is-8), nn(GNU\/Linux-11, Debian-10), dobj(called-9, GNU\/Linux-11), conj_or(GNU\/Linux-11, simply-14), conj_or(GNU\/Linux-11, Debian-15), prep(called-9, for-16), dep(for-16, short-17)]

* DEBUG: Imprimiendo salida en formato oneline

(ROOT (S (NP (DT This) (VBG operating) (NN system) (SBAR (IN that) (S (NP (PRP we)) (VP (VBP have) (VP (VBN created)))))) (VP (VBZ is) (VP (VBN called) (NP (NP (NNP Debian) (NNP GNU\/Linux)) (, ,) (CC or) (ADVP (RB simply)) (NP (NNP Debian))) (PP (IN for) (ADJP (JJ short))))) (. .)))

* DEBUG: Imprimiendo salida en formato penn

(ROOT
  (S
    (NP (DT This) (VBG operating) (NN system)
      (SBAR (IN that)
        (S
          (NP (PRP we))
          (VP (VBP have)
            (VP (VBN created))))))
    (VP (VBZ is)
      (VP (VBN called)
        (NP
          (NP (NNP Debian) (NNP GNU\/Linux))
          (, ,)
          (CC or)
          (ADVP (RB simply))
          (NP (NNP Debian)))
        (PP (IN for)
          (ADJP (JJ short)))))
    (. .)))


* DEBUG: Imprimiendo salida en formato latexTree

.[
ROOT
  S
    NP
      DT
        This
      VBG
        operating
      NN
        system
      SBAR
        IN
          that
        S
          NP
            PRP
              we
          VP
            VBP
              have
            VP
              VBN
                created
    VP
      VBZ
        is
      VP
        VBN
          called
        NP
          NP
            NNP
              Debian
            NNP
              GNU\/Linux
          ,
            ,
          CC
            or
          ADVP
            RB
              simply
          NP
            NNP
              Debian
        PP
          IN
            for
          ADJP
            JJ
              short
    .
      .
.]

* DEBUG: Imprimiendo salida en formato words

This operating system that we have created is called Debian GNU\/Linux , or simply Debian for short .


* DEBUG: Imprimiendo salida en formato wordsAndTags

This/DT operating/VBG system/NN that/IN we/PRP have/VBP created/VBN is/VBZ called/VBN Debian/NNP GNU\/Linux/NNP ,/, or/CC simply/RB Debian/NNP for/IN short/JJ ./.


* DEBUG: Imprimiendo salida en formato rootSymbolOnly

ROOT

* DEBUG: Imprimiendo salida en formato dependencies

dep(system-3,This-1)
dep(system-3,operating-2)
dep(is-8,system-3)
dep(system-3,that-4)
dep(have-6,we-5)
dep(that-4,have-6)
dep(have-6,created-7)
dep(is-8,called-9)
dep(GNU\/Linux-11,Debian-10)
dep(called-9,GNU\/Linux-11)
dep(GNU\/Linux-11,or-13)
dep(GNU\/Linux-11,simply-14)
dep(GNU\/Linux-11,Debian-15)
dep(called-9,for-16)
dep(for-16,short-17)


* DEBUG: Imprimiendo salida en formato typedDependencies

det(system-3, This-1)
amod(system-3, operating-2)
nsubjpass(called-9, system-3)
complm(created-7, that-4)
nsubj(created-7, we-5)
aux(created-7, have-6)
dep(system-3, created-7)
auxpass(called-9, is-8)
nn(GNU\/Linux-11, Debian-10)
dobj(called-9, GNU\/Linux-11)
cc(GNU\/Linux-11, or-13)
conj(GNU\/Linux-11, simply-14)
conj(GNU\/Linux-11, Debian-15)
prep(called-9, for-16)
dep(for-16, short-17)



* DEBUG: Imprimiendo salida en formato typedDependenciesCollapsed

det(system-3, This-1)
amod(system-3, operating-2)
nsubjpass(called-9, system-3)
complm(created-7, that-4)
nsubj(created-7, we-5)
aux(created-7, have-6)
dep(system-3, created-7)
auxpass(called-9, is-8)
nn(GNU\/Linux-11, Debian-10)
dobj(called-9, GNU\/Linux-11)
conj_or(GNU\/Linux-11, simply-14)
conj_or(GNU\/Linux-11, Debian-15)
prep(called-9, for-16)
dep(for-16, short-17)


* DEBUG: Parseando frase 3 de 19

[det(system-3, An-1), amod(system-3, operating-2), nsubj(set-6, system-3), cop(set-6, is-4), det(set-6, the-5), amod(programs-9, basic-8), prep_of(set-6, programs-9), conj_and(programs-9, utilities-11), nsubj(make-13, that-12), rcmod(set-6, make-13), poss(run-16, your-14), nn(run-16, computer-15), dobj(make-13, run-16)]

* DEBUG: Imprimiendo salida en formato oneline

(ROOT (S (NP (DT An) (VBG operating) (NN system)) (VP (VBZ is) (NP (NP (DT the) (NN set)) (PP (IN of) (NP (JJ basic) (NNS programs) (CC and) (NNS utilities))) (SBAR (WHNP (WDT that)) (S (VP (VBP make) (NP (PRP$ your) (NN computer) (NN run))))))) (. .)))

* DEBUG: Imprimiendo salida en formato penn

(ROOT
  (S
    (NP (DT An) (VBG operating) (NN system))
    (VP (VBZ is)
      (NP
        (NP (DT the) (NN set))
        (PP (IN of)
          (NP (JJ basic) (NNS programs)
            (CC and)
            (NNS utilities)))
        (SBAR
          (WHNP (WDT that))
          (S
            (VP (VBP make)
              (NP (PRP$ your) (NN computer) (NN run)))))))
    (. .)))


* DEBUG: Imprimiendo salida en formato latexTree

.[
ROOT
  S
    NP
      DT
        An
      VBG
        operating
      NN
        system
    VP
      VBZ
        is
      NP
        NP
          DT
            the
          NN
            set
        PP
          IN
            of
          NP
            JJ
              basic
            NNS
              programs
            CC
              and
            NNS
              utilities
        SBAR
          WHNP
            WDT
              that
          S
            VP
              VBP
                make
              NP
                PRP$
                  your
                NN
                  computer
                NN
                  run
    .
      .
.]

* DEBUG: Imprimiendo salida en formato words

An operating system is the set of basic programs and utilities that make your computer run .


* DEBUG: Imprimiendo salida en formato wordsAndTags

An/DT operating/VBG system/NN is/VBZ the/DT set/NN of/IN basic/JJ programs/NNS and/CC utilities/NNS that/WDT make/VBP your/PRP$ computer/NN run/NN ./.


* DEBUG: Imprimiendo salida en formato rootSymbolOnly

ROOT

* DEBUG: Imprimiendo salida en formato dependencies

dep(system-3,An-1)
dep(system-3,operating-2)
dep(is-4,system-3)
dep(set-6,the-5)
dep(is-4,set-6)
dep(set-6,of-7)
dep(programs-9,basic-8)
dep(of-7,programs-9)
dep(programs-9,and-10)
dep(programs-9,utilities-11)
dep(set-6,that-12)
dep(that-12,make-13)
dep(run-16,your-14)
dep(run-16,computer-15)
dep(make-13,run-16)


* DEBUG: Imprimiendo salida en formato typedDependencies

det(system-3, An-1)
amod(system-3, operating-2)
nsubj(set-6, system-3)
cop(set-6, is-4)
det(set-6, the-5)
prep(set-6, of-7)
amod(programs-9, basic-8)
pobj(of-7, programs-9)
cc(programs-9, and-10)
conj(programs-9, utilities-11)
nsubj(make-13, that-12)
rcmod(set-6, make-13)
poss(run-16, your-14)
nn(run-16, computer-15)
dobj(make-13, run-16)



* DEBUG: Imprimiendo salida en formato typedDependenciesCollapsed

det(system-3, An-1)
amod(system-3, operating-2)
nsubj(set-6, system-3)
cop(set-6, is-4)
det(set-6, the-5)
amod(programs-9, basic-8)
prep_of(set-6, programs-9)
conj_and(programs-9, utilities-11)
nsubj(make-13, that-12)
rcmod(set-6, make-13)
poss(run-16, your-14)
nn(run-16, computer-15)
dobj(make-13, run-16)


* DEBUG: Parseando frase 4 de 19

[det(core-3, the-2), prep_at(kernel-10, core-3), det(operating-6, an-5), prep_of(core-3, operating-6), nsubj(kernel-10, system-7), cop(kernel-10, is-8), det(kernel-10, the-9)]

* DEBUG: Imprimiendo salida en formato oneline

(ROOT (S (PP (IN At) (NP (NP (DT the) (NN core)) (PP (IN of) (NP (DT an) (NN operating))))) (NP (NN system)) (VP (VBZ is) (NP (DT the) (NN kernel))) (. .)))

* DEBUG: Imprimiendo salida en formato penn

(ROOT
  (S
    (PP (IN At)
      (NP
        (NP (DT the) (NN core))
        (PP (IN of)
          (NP (DT an) (NN operating)))))
    (NP (NN system))
    (VP (VBZ is)
      (NP (DT the) (NN kernel)))
    (. .)))


* DEBUG: Imprimiendo salida en formato latexTree

.[
ROOT
  S
    PP
      IN
        At
      NP
        NP
          DT
            the
          NN
            core
        PP
          IN
            of
          NP
            DT
              an
            NN
              operating
    NP
      NN
        system
    VP
      VBZ
        is
      NP
        DT
          the
        NN
          kernel
    .
      .
.]

* DEBUG: Imprimiendo salida en formato words

At the core of an operating system is the kernel .


* DEBUG: Imprimiendo salida en formato wordsAndTags

At/IN the/DT core/NN of/IN an/DT operating/NN system/NN is/VBZ the/DT kernel/NN ./.


* DEBUG: Imprimiendo salida en formato rootSymbolOnly

ROOT

* DEBUG: Imprimiendo salida en formato dependencies

dep(is-8,At-1)
dep(core-3,the-2)
dep(At-1,core-3)
dep(core-3,of-4)
dep(operating-6,an-5)
dep(of-4,operating-6)
dep(is-8,system-7)
dep(kernel-10,the-9)
dep(is-8,kernel-10)


* DEBUG: Imprimiendo salida en formato typedDependencies

prep(kernel-10, At-1)
det(core-3, the-2)
pobj(At-1, core-3)
prep(core-3, of-4)
det(operating-6, an-5)
pobj(of-4, operating-6)
nsubj(kernel-10, system-7)
cop(kernel-10, is-8)
det(kernel-10, the-9)



* DEBUG: Imprimiendo salida en formato typedDependenciesCollapsed

det(core-3, the-2)
prep_at(kernel-10, core-3)
det(operating-6, an-5)
prep_of(core-3, operating-6)
nsubj(kernel-10, system-7)
cop(kernel-10, is-8)
det(kernel-10, the-9)


* DEBUG: Parseando frase 5 de 19

[det(kernel-2, The-1), nsubj(program-7, kernel-2), cop(program-7, is-3), det(program-7, the-4), advmod(fundamental-6, most-5), amod(program-7, fundamental-6), det(computer-10, the-9), prep_on(program-7, computer-10), conj_and(program-7, does-12), predet(housekeeping-16, all-13), det(housekeeping-16, the-14), amod(housekeeping-16, basic-15), dobj(program-7, housekeeping-16), conj_and(program-7, lets-18), nsubj(start-20, you-19), ccomp(lets-18, start-20), amod(programs-22, other-21), dobj(start-20, programs-22)]

* DEBUG: Imprimiendo salida en formato oneline

(ROOT (S (NP (DT The) (NN kernel)) (VP (VP (VP (VBZ is) (NP (NP (DT the) (ADJP (RBS most) (JJ fundamental)) (NN program)) (PP (IN on) (NP (DT the) (NN computer))))) (CC and) (VP (VBZ does)) (NP (PDT all) (DT the) (JJ basic) (NN housekeeping))) (CC and) (VP (VBZ lets) (S (NP (PRP you)) (VP (VB start) (NP (JJ other) (NNS programs)))))) (. .)))

* DEBUG: Imprimiendo salida en formato penn

(ROOT
  (S
    (NP (DT The) (NN kernel))
    (VP
      (VP
        (VP (VBZ is)
          (NP
            (NP (DT the)
              (ADJP (RBS most) (JJ fundamental))
              (NN program))
            (PP (IN on)
              (NP (DT the) (NN computer)))))
        (CC and)
        (VP (VBZ does))
        (NP (PDT all) (DT the) (JJ basic) (NN housekeeping)))
      (CC and)
      (VP (VBZ lets)
        (S
          (NP (PRP you))
          (VP (VB start)
            (NP (JJ other) (NNS programs))))))
    (. .)))


* DEBUG: Imprimiendo salida en formato latexTree

.[
ROOT
  S
    NP
      DT
        The
      NN
        kernel
    VP
      VP
        VP
          VBZ
            is
          NP
            NP
              DT
                the
              ADJP
                RBS
                  most
                JJ
                  fundamental
              NN
                program
            PP
              IN
                on
              NP
                DT
                  the
                NN
                  computer
        CC
          and
        VP
          VBZ
            does
        NP
          PDT
            all
          DT
            the
          JJ
            basic
          NN
            housekeeping
      CC
        and
      VP
        VBZ
          lets
        S
          NP
            PRP
              you
          VP
            VB
              start
            NP
              JJ
                other
              NNS
                programs
    .
      .
.]

* DEBUG: Imprimiendo salida en formato words

The kernel is the most fundamental program on the computer and does all the basic housekeeping and lets you start other programs .


* DEBUG: Imprimiendo salida en formato wordsAndTags

The/DT kernel/NN is/VBZ the/DT most/RBS fundamental/JJ program/NN on/IN the/DT computer/NN and/CC does/VBZ all/PDT the/DT basic/JJ housekeeping/NN and/CC lets/VBZ you/PRP start/VB other/JJ programs/NNS ./.


* DEBUG: Imprimiendo salida en formato rootSymbolOnly

ROOT

* DEBUG: Imprimiendo salida en formato dependencies

dep(kernel-2,The-1)
dep(is-3,kernel-2)
dep(program-7,the-4)
dep(fundamental-6,most-5)
dep(program-7,fundamental-6)
dep(is-3,program-7)
dep(program-7,on-8)
dep(computer-10,the-9)
dep(on-8,computer-10)
dep(is-3,and-11)
dep(is-3,does-12)
dep(housekeeping-16,all-13)
dep(housekeeping-16,the-14)
dep(housekeeping-16,basic-15)
dep(is-3,housekeeping-16)
dep(is-3,and-17)
dep(is-3,lets-18)
dep(start-20,you-19)
dep(lets-18,start-20)
dep(programs-22,other-21)
dep(start-20,programs-22)


* DEBUG: Imprimiendo salida en formato typedDependencies

det(kernel-2, The-1)
nsubj(program-7, kernel-2)
cop(program-7, is-3)
det(program-7, the-4)
advmod(fundamental-6, most-5)
amod(program-7, fundamental-6)
prep(program-7, on-8)
det(computer-10, the-9)
pobj(on-8, computer-10)
cc(program-7, and-11)
conj(program-7, does-12)
predet(housekeeping-16, all-13)
det(housekeeping-16, the-14)
amod(housekeeping-16, basic-15)
dobj(program-7, housekeeping-16)
cc(program-7, and-17)
conj(program-7, lets-18)
nsubj(start-20, you-19)
ccomp(lets-18, start-20)
amod(programs-22, other-21)
dobj(start-20, programs-22)



* DEBUG: Imprimiendo salida en formato typedDependenciesCollapsed

det(kernel-2, The-1)
nsubj(program-7, kernel-2)
cop(program-7, is-3)
det(program-7, the-4)
advmod(fundamental-6, most-5)
amod(program-7, fundamental-6)
det(computer-10, the-9)
prep_on(program-7, computer-10)
conj_and(program-7, does-12)
predet(housekeeping-16, all-13)
det(housekeeping-16, the-14)
amod(housekeeping-16, basic-15)
dobj(program-7, housekeeping-16)
conj_and(program-7, lets-18)
nsubj(start-20, you-19)
ccomp(lets-18, start-20)
amod(programs-22, other-21)
dobj(start-20, programs-22)


* DEBUG: Parseando frase 6 de 19

[nn(systems-2, Debian-1), nsubj(use-4, systems-2), advmod(use-4, currently-3), det(kernel-7, the-5), nn(kernel-7, Linux-6), dobj(use-4, kernel-7)]

* DEBUG: Imprimiendo salida en formato oneline

(ROOT (S (NP (NN Debian) (NNS systems)) (ADVP (RB currently)) (VP (VBP use) (NP (DT the) (NNP Linux) (NN kernel))) (. .)))

* DEBUG: Imprimiendo salida en formato penn

(ROOT
  (S
    (NP (NN Debian) (NNS systems))
    (ADVP (RB currently))
    (VP (VBP use)
      (NP (DT the) (NNP Linux) (NN kernel)))
    (. .)))


* DEBUG: Imprimiendo salida en formato latexTree

.[
ROOT
  S
    NP
      NN
        Debian
      NNS
        systems
    ADVP
      RB
        currently
    VP
      VBP
        use
      NP
        DT
          the
        NNP
          Linux
        NN
          kernel
    .
      .
.]

* DEBUG: Imprimiendo salida en formato words

Debian systems currently use the Linux kernel .


* DEBUG: Imprimiendo salida en formato wordsAndTags

Debian/NN systems/NNS currently/RB use/VBP the/DT Linux/NNP kernel/NN ./.


* DEBUG: Imprimiendo salida en formato rootSymbolOnly

ROOT

* DEBUG: Imprimiendo salida en formato dependencies

dep(systems-2,Debian-1)
dep(use-4,systems-2)
dep(use-4,currently-3)
dep(kernel-7,the-5)
dep(kernel-7,Linux-6)
dep(use-4,kernel-7)


* DEBUG: Imprimiendo salida en formato typedDependencies

nn(systems-2, Debian-1)
nsubj(use-4, systems-2)
advmod(use-4, currently-3)
det(kernel-7, the-5)
nn(kernel-7, Linux-6)
dobj(use-4, kernel-7)



* DEBUG: Imprimiendo salida en formato typedDependenciesCollapsed

nn(systems-2, Debian-1)
nsubj(use-4, systems-2)
advmod(use-4, currently-3)
det(kernel-7, the-5)
nn(kernel-7, Linux-6)
dobj(use-4, kernel-7)


* DEBUG: Parseando frase 7 de 19

[nsubj(piece-4, Linux-1), cop(piece-4, is-2), det(piece-4, a-3), prep_of(piece-4, software-6), partmod(software-6, started-7), nn(Torvalds-10, Linus-9), prep_by(started-7, Torvalds-10), conj_and(started-7, supported-12), prep_by(supported-12, thousands-14), nn(worldwide-17, programmers-16), prep_of(thousands-14, worldwide-17)]

* DEBUG: Imprimiendo salida en formato oneline

(ROOT (S (NP (NNP Linux)) (VP (VBZ is) (NP (NP (DT a) (NN piece)) (PP (IN of) (NP (NP (NN software)) (VP (VP (VBN started) (PP (IN by) (NP (NNP Linus) (NNPS Torvalds)))) (CC and) (VP (VBN supported) (PP (IN by) (NP (NP (NNS thousands)) (PP (IN of) (NP (NNS programmers) (NNS worldwide))))))))))) (. .)))

* DEBUG: Imprimiendo salida en formato penn

(ROOT
  (S
    (NP (NNP Linux))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN piece))
        (PP (IN of)
          (NP
            (NP (NN software))
            (VP
              (VP (VBN started)
                (PP (IN by)
                  (NP (NNP Linus) (NNPS Torvalds))))
              (CC and)
              (VP (VBN supported)
                (PP (IN by)
                  (NP
                    (NP (NNS thousands))
                    (PP (IN of)
                      (NP (NNS programmers) (NNS worldwide)))))))))))
    (. .)))


* DEBUG: Imprimiendo salida en formato latexTree

.[
ROOT
  S
    NP
      NNP
        Linux
    VP
      VBZ
        is
      NP
        NP
          DT
            a
          NN
            piece
        PP
          IN
            of
          NP
            NP
              NN
                software
            VP
              VP
                VBN
                  started
                PP
                  IN
                    by
                  NP
                    NNP
                      Linus
                    NNPS
                      Torvalds
              CC
                and
              VP
                VBN
                  supported
                PP
                  IN
                    by
                  NP
                    NP
                      NNS
                        thousands
                    PP
                      IN
                        of
                      NP
                        NNS
                          programmers
                        NNS
                          worldwide
    .
      .
.]

* DEBUG: Imprimiendo salida en formato words

Linux is a piece of software started by Linus Torvalds and supported by thousands of programmers worldwide .


* DEBUG: Imprimiendo salida en formato wordsAndTags

Linux/NNP is/VBZ a/DT piece/NN of/IN software/NN started/VBN by/IN Linus/NNP Torvalds/NNPS and/CC supported/VBN by/IN thousands/NNS of/IN programmers/NNS worldwide/NNS ./.


* DEBUG: Imprimiendo salida en formato rootSymbolOnly

ROOT

* DEBUG: Imprimiendo salida en formato dependencies

dep(is-2,Linux-1)
dep(piece-4,a-3)
dep(is-2,piece-4)
dep(piece-4,of-5)
dep(of-5,software-6)
dep(software-6,started-7)
dep(started-7,by-8)
dep(Torvalds-10,Linus-9)
dep(by-8,Torvalds-10)
dep(started-7,and-11)
dep(started-7,supported-12)
dep(supported-12,by-13)
dep(by-13,thousands-14)
dep(thousands-14,of-15)
dep(worldwide-17,programmers-16)
dep(of-15,worldwide-17)


* DEBUG: Imprimiendo salida en formato typedDependencies

nsubj(piece-4, Linux-1)
cop(piece-4, is-2)
det(piece-4, a-3)
prep(piece-4, of-5)
pobj(of-5, software-6)
partmod(software-6, started-7)
prep(started-7, by-8)
nn(Torvalds-10, Linus-9)
pobj(by-8, Torvalds-10)
cc(started-7, and-11)
conj(started-7, supported-12)
prep(supported-12, by-13)
pobj(by-13, thousands-14)
prep(thousands-14, of-15)
nn(worldwide-17, programmers-16)
pobj(of-15, worldwide-17)



* DEBUG: Imprimiendo salida en formato typedDependenciesCollapsed

nsubj(piece-4, Linux-1)
cop(piece-4, is-2)
det(piece-4, a-3)
prep_of(piece-4, software-6)
partmod(software-6, started-7)
nn(Torvalds-10, Linus-9)
prep_by(started-7, Torvalds-10)
conj_and(started-7, supported-12)
prep_by(supported-12, thousands-14)
nn(worldwide-17, programmers-16)
prep_of(thousands-14, worldwide-17)


* DEBUG: Parseando frase 8 de 19

[advmod(is-4, However-1), nsubj(is-4, work-3), prep_in(is-4, progress-6), aux(provide-8, to-7), xcomp(is-4, provide-8), dobj(provide-8, Debian-9), amod(kernels-12, other-11), prep_for(for-15, kernels-12), dep(provide-8, primarily-14), det(Hurd-17, the-16), prep_for(provide-8, Hurd-17)]

* DEBUG: Imprimiendo salida en formato oneline

(ROOT (S (ADVP (RB However)) (, ,) (NP (NN work)) (VP (VBZ is) (PP (IN in) (NP (NN progress))) (S (VP (TO to) (VP (VB provide) (NP (NNP Debian)) (PP (PP (IN for) (NP (JJ other) (NNS kernels))) (, ,) (RB primarily) (PP (IN for) (NP (DT the) (NNP Hurd)))))))) (. .)))

* DEBUG: Imprimiendo salida en formato penn

(ROOT
  (S
    (ADVP (RB However))
    (, ,)
    (NP (NN work))
    (VP (VBZ is)
      (PP (IN in)
        (NP (NN progress)))
      (S
        (VP (TO to)
          (VP (VB provide)
            (NP (NNP Debian))
            (PP
              (PP (IN for)
                (NP (JJ other) (NNS kernels)))
              (, ,) (RB primarily)
              (PP (IN for)
                (NP (DT the) (NNP Hurd))))))))
    (. .)))


* DEBUG: Imprimiendo salida en formato latexTree

.[
ROOT
  S
    ADVP
      RB
        However
    ,
      ,
    NP
      NN
        work
    VP
      VBZ
        is
      PP
        IN
          in
        NP
          NN
            progress
      S
        VP
          TO
            to
          VP
            VB
              provide
            NP
              NNP
                Debian
            PP
              PP
                IN
                  for
                NP
                  JJ
                    other
                  NNS
                    kernels
              ,
                ,
              RB
                primarily
              PP
                IN
                  for
                NP
                  DT
                    the
                  NNP
                    Hurd
    .
      .
.]

* DEBUG: Imprimiendo salida en formato words

However , work is in progress to provide Debian for other kernels , primarily for the Hurd .


* DEBUG: Imprimiendo salida en formato wordsAndTags

However/RB ,/, work/NN is/VBZ in/IN progress/NN to/TO provide/VB Debian/NNP for/IN other/JJ kernels/NNS ,/, primarily/RB for/IN the/DT Hurd/NNP ./.


* DEBUG: Imprimiendo salida en formato rootSymbolOnly

ROOT

* DEBUG: Imprimiendo salida en formato dependencies

dep(is-4,However-1)
dep(is-4,work-3)
dep(is-4,in-5)
dep(in-5,progress-6)
dep(is-4,to-7)
dep(to-7,provide-8)
dep(provide-8,Debian-9)
dep(kernels-12,other-11)
dep(for-10,kernels-12)
dep(for-15,primarily-14)
dep(for-15,for-15)
dep(provide-8,for-15)
dep(Hurd-17,the-16)
dep(for-15,Hurd-17)


* DEBUG: Imprimiendo salida en formato typedDependencies

advmod(is-4, However-1)
nsubj(is-4, work-3)
prep(is-4, in-5)
pobj(in-5, progress-6)
aux(provide-8, to-7)
xcomp(is-4, provide-8)
dobj(provide-8, Debian-9)
dep(for-15, for-10)
amod(kernels-12, other-11)
pobj(for-10, kernels-12)
dep(for-15, primarily-14)
prep(provide-8, for-15)
det(Hurd-17, the-16)
pobj(for-15, Hurd-17)



* DEBUG: Imprimiendo salida en formato typedDependenciesCollapsed

advmod(is-4, However-1)
nsubj(is-4, work-3)
prep_in(is-4, progress-6)
aux(provide-8, to-7)
xcomp(is-4, provide-8)
dobj(provide-8, Debian-9)
amod(kernels-12, other-11)
prep_for(for-15, kernels-12)
dep(provide-8, primarily-14)
det(Hurd-17, the-16)
prep_for(provide-8, Hurd-17)


* DEBUG: Parseando frase 9 de 19

[det(Hurd-2, The-1), nsubj(collection-5, Hurd-2), cop(collection-5, is-3), det(collection-5, a-4), prep_of(collection-5, servers-7), nsubj(run-9, that-8), rcmod(servers-7, run-9), prep_on(run-9, top-11), det(microkernel-14, a-13), prep_of(top-11, microkernel-14), dep(microkernel-14, such-16), prep_as(microkernel-14, Mach-18), aux(implement-21, to-20), xcomp(run-9, implement-21), amod(features-23, different-22), dobj(implement-21, features-23)]

* DEBUG: Imprimiendo salida en formato oneline

(ROOT (S (NP (DT The) (NNP Hurd)) (VP (VBZ is) (NP (NP (DT a) (NN collection)) (PP (IN of) (NP (NP (NNS servers)) (SBAR (WHNP (WDT that)) (S (VP (VBN run) (PP (IN on) (NP (NP (NN top)) (PP (IN of) (NP (NP (DT a) (NN microkernel)) (PRN (-LRB- -LRB-) (PP (JJ such) (IN as) (NP (NNP Mach))) (-RRB- -RRB-)))))) (S (VP (TO to) (VP (VB implement) (NP (JJ different) (NNS features)))))))))))) (. .)))

* DEBUG: Imprimiendo salida en formato penn

(ROOT
  (S
    (NP (DT The) (NNP Hurd))
    (VP (VBZ is)
      (NP
        (NP (DT a) (NN collection))
        (PP (IN of)
          (NP
            (NP (NNS servers))
            (SBAR
              (WHNP (WDT that))
              (S
                (VP (VBN run)
                  (PP (IN on)
                    (NP
                      (NP (NN top))
                      (PP (IN of)
                        (NP
                          (NP (DT a) (NN microkernel))
                          (PRN (-LRB- -LRB-)
                            (PP (JJ such) (IN as)
                              (NP (NNP Mach)))
                            (-RRB- -RRB-))))))
                  (S
                    (VP (TO to)
                      (VP (VB implement)
                        (NP (JJ different) (NNS features))))))))))))
    (. .)))


* DEBUG: Imprimiendo salida en formato latexTree

.[
ROOT
  S
    NP
      DT
        The
      NNP
        Hurd
    VP
      VBZ
        is
      NP
        NP
          DT
            a
          NN
            collection
        PP
          IN
            of
          NP
            NP
              NNS
                servers
            SBAR
              WHNP
                WDT
                  that
              S
                VP
                  VBN
                    run
                  PP
                    IN
                      on
                    NP
                      NP
                        NN
                          top
                      PP
                        IN
                          of
                        NP
                          NP
                            DT
                              a
                            NN
                              microkernel
                          PRN
                            -LRB-
                              -LRB-
                            PP
                              JJ
                                such
                              IN
                                as
                              NP
                                NNP
                                  Mach
                            -RRB-
                              -RRB-
                  S
                    VP
                      TO
                        to
                      VP
                        VB
                          implement
                        NP
                          JJ
                            different
                          NNS
                            features
    .
      .
.]

* DEBUG: Imprimiendo salida en formato words

The Hurd is a collection of servers that run on top of a microkernel -LRB- such as Mach -RRB- to implement different features .


* DEBUG: Imprimiendo salida en formato wordsAndTags

The/DT Hurd/NNP is/VBZ a/DT collection/NN of/IN servers/NNS that/WDT run/VBN on/IN top/NN of/IN a/DT microkernel/NN -LRB-/-LRB- such/JJ as/IN Mach/NNP -RRB-/-RRB- to/TO implement/VB different/JJ features/NNS ./.


* DEBUG: Imprimiendo salida en formato rootSymbolOnly

ROOT

* DEBUG: Imprimiendo salida en formato dependencies

dep(Hurd-2,The-1)
dep(is-3,Hurd-2)
dep(collection-5,a-4)
dep(is-3,collection-5)
dep(collection-5,of-6)
dep(of-6,servers-7)
dep(servers-7,that-8)
dep(that-8,run-9)
dep(run-9,on-10)
dep(on-10,top-11)
dep(top-11,of-12)
dep(microkernel-14,a-13)
dep(of-12,microkernel-14)
dep(as-17,such-16)
dep(-LRB--15,as-17)
dep(as-17,Mach-18)
dep(run-9,to-20)
dep(to-20,implement-21)
dep(features-23,different-22)
dep(implement-21,features-23)


* DEBUG: Imprimiendo salida en formato typedDependencies

det(Hurd-2, The-1)
nsubj(collection-5, Hurd-2)
cop(collection-5, is-3)
det(collection-5, a-4)
prep(collection-5, of-6)
pobj(of-6, servers-7)
nsubj(run-9, that-8)
rcmod(servers-7, run-9)
prep(run-9, on-10)
pobj(on-10, top-11)
prep(top-11, of-12)
det(microkernel-14, a-13)
pobj(of-12, microkernel-14)
dep(as-17, such-16)
dep(microkernel-14, as-17)
pobj(as-17, Mach-18)
aux(implement-21, to-20)
xcomp(run-9, implement-21)
amod(features-23, different-22)
dobj(implement-21, features-23)



* DEBUG: Imprimiendo salida en formato typedDependenciesCollapsed

det(Hurd-2, The-1)
nsubj(collection-5, Hurd-2)
cop(collection-5, is-3)
det(collection-5, a-4)
prep_of(collection-5, servers-7)
nsubj(run-9, that-8)
rcmod(servers-7, run-9)
prep_on(run-9, top-11)
det(microkernel-14, a-13)
prep_of(top-11, microkernel-14)
dep(microkernel-14, such-16)
prep_as(microkernel-14, Mach-18)
aux(implement-21, to-20)
xcomp(run-9, implement-21)
amod(features-23, different-22)
dobj(implement-21, features-23)


* DEBUG: Parseando frase 10 de 19

[det(Hurd-2, The-1), nsubj(software-5, Hurd-2), cop(software-5, is-3), amod(software-5, free-4), partmod(software-5, produced-6), det(project-10, the-8), nn(project-10, GNU-9), prep_by(produced-6, project-10)]

* DEBUG: Imprimiendo salida en formato oneline

(ROOT (S (NP (DT The) (NNP Hurd)) (VP (VBZ is) (NP (NP (JJ free) (NN software)) (VP (VBN produced) (PP (IN by) (NP (DT the) (NNP GNU) (NN project)))))) (. .)))

* DEBUG: Imprimiendo salida en formato penn

(ROOT
  (S
    (NP (DT The) (NNP Hurd))
    (VP (VBZ is)
      (NP
        (NP (JJ free) (NN software))
        (VP (VBN produced)
          (PP (IN by)
            (NP (DT the) (NNP GNU) (NN project))))))
    (. .)))


* DEBUG: Imprimiendo salida en formato latexTree

.[
ROOT
  S
    NP
      DT
        The
      NNP
        Hurd
    VP
      VBZ
        is
      NP
        NP
          JJ
            free
          NN
            software
        VP
          VBN
            produced
          PP
            IN
              by
            NP
              DT
                the
              NNP
                GNU
              NN
                project
    .
      .
.]

* DEBUG: Imprimiendo salida en formato words

The Hurd is free software produced by the GNU project .


* DEBUG: Imprimiendo salida en formato wordsAndTags

The/DT Hurd/NNP is/VBZ free/JJ software/NN produced/VBN by/IN the/DT GNU/NNP project/NN ./.


* DEBUG: Imprimiendo salida en formato rootSymbolOnly

ROOT

* DEBUG: Imprimiendo salida en formato dependencies

dep(Hurd-2,The-1)
dep(is-3,Hurd-2)
dep(software-5,free-4)
dep(is-3,software-5)
dep(software-5,produced-6)
dep(produced-6,by-7)
dep(project-10,the-8)
dep(project-10,GNU-9)
dep(by-7,project-10)


* DEBUG: Imprimiendo salida en formato typedDependencies

det(Hurd-2, The-1)
nsubj(software-5, Hurd-2)
cop(software-5, is-3)
amod(software-5, free-4)
partmod(software-5, produced-6)
prep(produced-6, by-7)
det(project-10, the-8)
nn(project-10, GNU-9)
pobj(by-7, project-10)



* DEBUG: Imprimiendo salida en formato typedDependenciesCollapsed

det(Hurd-2, The-1)
nsubj(software-5, Hurd-2)
cop(software-5, is-3)
amod(software-5, free-4)
partmod(software-5, produced-6)
det(project-10, the-8)
nn(project-10, GNU-9)
prep_by(produced-6, project-10)


* DEBUG: Parseando frase 11 de 19

[det(part-3, A-1), amod(part-3, large-2), det(tools-7, the-5), amod(tools-7, basic-6), prep_of(part-3, tools-7), nsubj(fill-9, that-8), rcmod(part-3, fill-9), prt(fill-9, out-10), det(system-13, the-11), amod(system-13, operating-12), dobj(fill-9, system-13), partmod(system-13, come-14), det(project-18, the-16), nn(project-18, GNU-17), prep_from(come-14, project-18), advmod(part-3, hence-20), det(names-22, the-21), dep(part-3, names-22), dep(names-22, GNU\/Linux-24), conj_and(GNU\/Linux-24, GNU\/Hurd-26)]

* DEBUG: Imprimiendo salida en formato oneline

(ROOT (NP (NP (NP (DT A) (JJ large) (NN part)) (PP (IN of) (NP (DT the) (JJ basic) (NNS tools))) (SBAR (WHNP (WDT that)) (S (VP (VBP fill) (PRT (RP out)) (NP (NP (DT the) (VBG operating) (NN system)) (VP (VBN come) (PP (IN from) (NP (DT the) (NNP GNU) (NN project))))))))) (: ;) (RB hence) (NP (NP (DT the) (NNS names)) (: :) (NP (NNP GNU\/Linux) (CC and) (NNP GNU\/Hurd))) (. .)))

* DEBUG: Imprimiendo salida en formato penn

(ROOT
  (NP
    (NP
      (NP (DT A) (JJ large) (NN part))
      (PP (IN of)
        (NP (DT the) (JJ basic) (NNS tools)))
      (SBAR
        (WHNP (WDT that))
        (S
          (VP (VBP fill)
            (PRT (RP out))
            (NP
              (NP (DT the) (VBG operating) (NN system))
              (VP (VBN come)
                (PP (IN from)
                  (NP (DT the) (NNP GNU) (NN project)))))))))
    (: ;) (RB hence)
    (NP
      (NP (DT the) (NNS names))
      (: :)
      (NP (NNP GNU\/Linux)
        (CC and)
        (NNP GNU\/Hurd)))
    (. .)))


* DEBUG: Imprimiendo salida en formato latexTree

.[
ROOT
  NP
    NP
      NP
        DT
          A
        JJ
          large
        NN
          part
      PP
        IN
          of
        NP
          DT
            the
          JJ
            basic
          NNS
            tools
      SBAR
        WHNP
          WDT
            that
        S
          VP
            VBP
              fill
            PRT
              RP
                out
            NP
              NP
                DT
                  the
                VBG
                  operating
                NN
                  system
              VP
                VBN
                  come
                PP
                  IN
                    from
                  NP
                    DT
                      the
                    NNP
                      GNU
                    NN
                      project
    :
      ;
    RB
      hence
    NP
      NP
        DT
          the
        NNS
          names
      :
        :
      NP
        NNP
          GNU\/Linux
        CC
          and
        NNP
          GNU\/Hurd
    .
      .
.]

* DEBUG: Imprimiendo salida en formato words

A large part of the basic tools that fill out the operating system come from the GNU project ; hence the names : GNU\/Linux and GNU\/Hurd .


* DEBUG: Imprimiendo salida en formato wordsAndTags

A/DT large/JJ part/NN of/IN the/DT basic/JJ tools/NNS that/WDT fill/VBP out/RP the/DT operating/VBG system/NN come/VBN from/IN the/DT GNU/NNP project/NN ;/: hence/RB the/DT names/NNS :/: GNU\/Linux/NNP and/CC GNU\/Hurd/NNP ./.


* DEBUG: Imprimiendo salida en formato rootSymbolOnly

ROOT

* DEBUG: Imprimiendo salida en formato dependencies

dep(part-3,A-1)
dep(part-3,large-2)
dep(part-3,of-4)
dep(tools-7,the-5)
dep(tools-7,basic-6)
dep(of-4,tools-7)
dep(part-3,that-8)
dep(that-8,fill-9)
dep(fill-9,out-10)
dep(system-13,the-11)
dep(system-13,operating-12)
dep(fill-9,system-13)
dep(system-13,come-14)
dep(come-14,from-15)
dep(project-18,the-16)
dep(project-18,GNU-17)
dep(from-15,project-18)
dep(part-3,hence-20)
dep(names-22,the-21)
dep(part-3,names-22)
dep(names-22,GNU\/Linux-24)
dep(GNU\/Linux-24,and-25)
dep(GNU\/Linux-24,GNU\/Hurd-26)


* DEBUG: Imprimiendo salida en formato typedDependencies

det(part-3, A-1)
amod(part-3, large-2)
prep(part-3, of-4)
det(tools-7, the-5)
amod(tools-7, basic-6)
pobj(of-4, tools-7)
nsubj(fill-9, that-8)
rcmod(part-3, fill-9)
prt(fill-9, out-10)
det(system-13, the-11)
amod(system-13, operating-12)
dobj(fill-9, system-13)
partmod(system-13, come-14)
prep(come-14, from-15)
det(project-18, the-16)
nn(project-18, GNU-17)
pobj(from-15, project-18)
advmod(part-3, hence-20)
det(names-22, the-21)
dep(part-3, names-22)
dep(names-22, GNU\/Linux-24)
cc(GNU\/Linux-24, and-25)
conj(GNU\/Linux-24, GNU\/Hurd-26)



* DEBUG: Imprimiendo salida en formato typedDependenciesCollapsed

det(part-3, A-1)
amod(part-3, large-2)
det(tools-7, the-5)
amod(tools-7, basic-6)
prep_of(part-3, tools-7)
nsubj(fill-9, that-8)
rcmod(part-3, fill-9)
prt(fill-9, out-10)
det(system-13, the-11)
amod(system-13, operating-12)
dobj(fill-9, system-13)
partmod(system-13, come-14)
det(project-18, the-16)
nn(project-18, GNU-17)
prep_from(come-14, project-18)
advmod(part-3, hence-20)
det(names-22, the-21)
dep(part-3, names-22)
dep(names-22, GNU\/Linux-24)
conj_and(GNU\/Linux-24, GNU\/Hurd-26)


* DEBUG: Parseando frase 12 de 19

[det(tools-2, These-1), nsubj(free-5, tools-2), cop(free-5, are-3), advmod(free-5, also-4)]

* DEBUG: Imprimiendo salida en formato oneline

(ROOT (S (NP (DT These) (NNS tools)) (VP (VBP are) (ADVP (RB also)) (ADJP (JJ free))) (. .)))

* DEBUG: Imprimiendo salida en formato penn

(ROOT
  (S
    (NP (DT These) (NNS tools))
    (VP (VBP are)
      (ADVP (RB also))
      (ADJP (JJ free)))
    (. .)))


* DEBUG: Imprimiendo salida en formato latexTree

.[
ROOT
  S
    NP
      DT
        These
      NNS
        tools
    VP
      VBP
        are
      ADVP
        RB
          also
      ADJP
        JJ
          free
    .
      .
.]

* DEBUG: Imprimiendo salida en formato words

These tools are also free .


* DEBUG: Imprimiendo salida en formato wordsAndTags

These/DT tools/NNS are/VBP also/RB free/JJ ./.


* DEBUG: Imprimiendo salida en formato rootSymbolOnly

ROOT

* DEBUG: Imprimiendo salida en formato dependencies

dep(tools-2,These-1)
dep(are-3,tools-2)
dep(are-3,also-4)
dep(are-3,free-5)


* DEBUG: Imprimiendo salida en formato typedDependencies

det(tools-2, These-1)
nsubj(free-5, tools-2)
cop(free-5, are-3)
advmod(free-5, also-4)



* DEBUG: Imprimiendo salida en formato typedDependenciesCollapsed

det(tools-2, These-1)
nsubj(free-5, tools-2)
cop(free-5, are-3)
advmod(free-5, also-4)


* DEBUG: Parseando frase 13 de 19

[prep_of(software-11, course-2), det(thing-5, the-4), nsubj(software-11, thing-5), complm(want-8, that-6), nsubj(want-8, people-7), rcmod(thing-5, want-8), cop(software-11, is-9), nn(software-11, application-10), nsubj(help-15, programs-13), aux(help-15, to-14), xcomp(software-11, help-15), nsubj(get-17, them-16), ccomp(help-15, get-17), dep(want-20, what-18), nsubj(want-20, they-19), ccomp(get-17, want-20), aux(done-23, to-21), aux(done-23, do-22), xcomp(want-20, done-23), nn(documents-27, editing-26), prep_from(done-23, documents-27), prep(documents-27, to-28), dep(to-28, running-29), det(business-31, a-30), dobj(running-29, business-31), amod(games-34, playing-33), prep_to(running-29, games-34), prep(done-23, to-35), dep(to-35, writing-36), amod(software-38, more-37), dobj(writing-36, software-38)]

* DEBUG: Imprimiendo salida en formato oneline

(ROOT (S (PP (IN Of) (NP (NN course))) (, ,) (NP (NP (DT the) (NN thing)) (SBAR (IN that) (S (NP (NNS people)) (VP (VBP want))))) (VP (VBZ is) (NP (NN application) (NN software)) (: :) (S (NP (NNS programs)) (VP (TO to) (VP (VB help) (S (NP (PRP them)) (VP (VB get) (SBAR (WHNP (WP what)) (S (NP (PRP they)) (VP (VBP want) (S (VP (TO to) (VP (VB do) (VP (VBN done) (, ,) (PP (IN from) (NP (NP (NN editing) (NNS documents)) (PP (TO to) (S (VP (VBG running) (NP (DT a) (NN business)) (PP (TO to) (NP (VBG playing) (NNS games)))))))) (PP (TO to) (S (VP (VBG writing) (NP (JJR more) (NN software)))))))))))))))))) (. .)))

* DEBUG: Imprimiendo salida en formato penn

(ROOT
  (S
    (PP (IN Of)
      (NP (NN course)))
    (, ,)
    (NP
      (NP (DT the) (NN thing))
      (SBAR (IN that)
        (S
          (NP (NNS people))
          (VP (VBP want)))))
    (VP (VBZ is)
      (NP (NN application) (NN software))
      (: :)
      (S
        (NP (NNS programs))
        (VP (TO to)
          (VP (VB help)
            (S
              (NP (PRP them))
              (VP (VB get)
                (SBAR
                  (WHNP (WP what))
                  (S
                    (NP (PRP they))
                    (VP (VBP want)
                      (S
                        (VP (TO to)
                          (VP (VB do)
                            (VP (VBN done) (, ,)
                              (PP (IN from)
                                (NP
                                  (NP (NN editing) (NNS documents))
                                  (PP (TO to)
                                    (S
                                      (VP (VBG running)
                                        (NP (DT a) (NN business))
                                        (PP (TO to)
                                          (NP (VBG playing) (NNS games))))))))
                              (PP (TO to)
                                (S
                                  (VP (VBG writing)
                                    (NP (JJR more) (NN software))))))))))))))))))
    (. .)))


* DEBUG: Imprimiendo salida en formato latexTree

.[
ROOT
  S
    PP
      IN
        Of
      NP
        NN
          course
    ,
      ,
    NP
      NP
        DT
          the
        NN
          thing
      SBAR
        IN
          that
        S
          NP
            NNS
              people
          VP
            VBP
              want
    VP
      VBZ
        is
      NP
        NN
          application
        NN
          software
      :
        :
      S
        NP
          NNS
            programs
        VP
          TO
            to
          VP
            VB
              help
            S
              NP
                PRP
                  them
              VP
                VB
                  get
                SBAR
                  WHNP
                    WP
                      what
                  S
                    NP
                      PRP
                        they
                    VP
                      VBP
                        want
                      S
                        VP
                          TO
                            to
                          VP
                            VB
                              do
                            VP
                              VBN
                                done
                              ,
                                ,
                              PP
                                IN
                                  from
                                NP
                                  NP
                                    NN
                                      editing
                                    NNS
                                      documents
                                  PP
                                    TO
                                      to
                                    S
                                      VP
                                        VBG
                                          running
                                        NP
                                          DT
                                            a
                                          NN
                                            business
                                        PP
                                          TO
                                            to
                                          NP
                                            VBG
                                              playing
                                            NNS
                                              games
                              PP
                                TO
                                  to
                                S
                                  VP
                                    VBG
                                      writing
                                    NP
                                      JJR
                                        more
                                      NN
                                        software
    .
      .
.]

* DEBUG: Imprimiendo salida en formato words

Of course , the thing that people want is application software : programs to help them get what they want to do done , from editing documents to running a business to playing games to writing more software .


* DEBUG: Imprimiendo salida en formato wordsAndTags

Of/IN course/NN ,/, the/DT thing/NN that/IN people/NNS want/VBP is/VBZ application/NN software/NN :/: programs/NNS to/TO help/VB them/PRP get/VB what/WP they/PRP want/VBP to/TO do/VB done/VBN ,/, from/IN editing/NN documents/NNS to/TO running/VBG a/DT business/NN to/TO playing/VBG games/NNS to/TO writing/VBG more/JJR software/NN ./.


* DEBUG: Imprimiendo salida en formato rootSymbolOnly

ROOT

* DEBUG: Imprimiendo salida en formato dependencies

dep(is-9,Of-1)
dep(Of-1,course-2)
dep(thing-5,the-4)
dep(is-9,thing-5)
dep(thing-5,that-6)
dep(want-8,people-7)
dep(that-6,want-8)
dep(software-11,application-10)
dep(is-9,software-11)
dep(to-14,programs-13)
dep(is-9,to-14)
dep(to-14,help-15)
dep(get-17,them-16)
dep(help-15,get-17)
dep(get-17,what-18)
dep(want-20,they-19)
dep(what-18,want-20)
dep(want-20,to-21)
dep(to-21,do-22)
dep(do-22,done-23)
dep(done-23,from-25)
dep(documents-27,editing-26)
dep(from-25,documents-27)
dep(documents-27,to-28)
dep(to-28,running-29)
dep(business-31,a-30)
dep(running-29,business-31)
dep(running-29,to-32)
dep(games-34,playing-33)
dep(to-32,games-34)
dep(done-23,to-35)
dep(to-35,writing-36)
dep(software-38,more-37)
dep(writing-36,software-38)


* DEBUG: Imprimiendo salida en formato typedDependencies

prep(software-11, Of-1)
pobj(Of-1, course-2)
det(thing-5, the-4)
nsubj(software-11, thing-5)
complm(want-8, that-6)
nsubj(want-8, people-7)
rcmod(thing-5, want-8)
cop(software-11, is-9)
nn(software-11, application-10)
nsubj(help-15, programs-13)
aux(help-15, to-14)
xcomp(software-11, help-15)
nsubj(get-17, them-16)
ccomp(help-15, get-17)
dep(want-20, what-18)
nsubj(want-20, they-19)
ccomp(get-17, want-20)
aux(done-23, to-21)
aux(done-23, do-22)
xcomp(want-20, done-23)
prep(done-23, from-25)
nn(documents-27, editing-26)
pobj(from-25, documents-27)
prep(documents-27, to-28)
dep(to-28, running-29)
det(business-31, a-30)
dobj(running-29, business-31)
prep(running-29, to-32)
amod(games-34, playing-33)
pobj(to-32, games-34)
prep(done-23, to-35)
dep(to-35, writing-36)
amod(software-38, more-37)
dobj(writing-36, software-38)



* DEBUG: Imprimiendo salida en formato typedDependenciesCollapsed

prep_of(software-11, course-2)
det(thing-5, the-4)
nsubj(software-11, thing-5)
complm(want-8, that-6)
nsubj(want-8, people-7)
rcmod(thing-5, want-8)
cop(software-11, is-9)
nn(software-11, application-10)
nsubj(help-15, programs-13)
aux(help-15, to-14)
xcomp(software-11, help-15)
nsubj(get-17, them-16)
ccomp(help-15, get-17)
dep(want-20, what-18)
nsubj(want-20, they-19)
ccomp(get-17, want-20)
aux(done-23, to-21)
aux(done-23, do-22)
xcomp(want-20, done-23)
nn(documents-27, editing-26)
prep_from(done-23, documents-27)
prep(documents-27, to-28)
dep(to-28, running-29)
det(business-31, a-30)
dobj(running-29, business-31)
amod(games-34, playing-33)
prep_to(running-29, games-34)
prep(done-23, to-35)
dep(to-35, writing-36)
amod(software-38, more-37)
dobj(writing-36, software-38)


* DEBUG: Parseando frase 14 de 19

[nsubj(comes-2, Debian-1), dep(15490-5, over-4), num(packages-6, 15490-5), prep_with(comes-2, packages-6), amod(software-9, precompiled-8), dep(packages-6, software-9), nsubjpass(bundled-12, that-10), auxpass(bundled-12, is-11), rcmod(software-9, bundled-12), prt(bundled-12, up-13), det(format-17, a-15), amod(format-17, nice-16), prep_in(bundled-12, format-17), amod(installation-20, easy-19), prep_for(format-17, installation-20), poss(machine-23, your-22), prep_on(bundled-12, machine-23), dep(free-29, all-26), prep_of(all-26, it-28), dep(comes-2, free-29)]

* DEBUG: Imprimiendo salida en formato oneline

(ROOT (S (S (NP (NNP Debian)) (VP (VBZ comes) (PP (IN with) (NP (NP (QP (IN over) (CD 15490)) (NNS packages)) (PRN (-LRB- -LRB-) (NP (NP (JJ precompiled) (NN software)) (SBAR (WHNP (WDT that)) (S (VP (VBZ is) (VP (VBN bundled) (PRT (RP up)) (PP (IN in) (NP (NP (DT a) (JJ nice) (NN format)) (PP (IN for) (NP (JJ easy) (NN installation))))) (PP (IN on) (NP (PRP$ your) (NN machine)))))))) (-RRB- -RRB-)))))) (: -) (S (NP (NP (DT all)) (PP (IN of) (NP (PRP it)))) (ADJP (JJ free))) (. .)))

* DEBUG: Imprimiendo salida en formato penn

(ROOT
  (S
    (S
      (NP (NNP Debian))
      (VP (VBZ comes)
        (PP (IN with)
          (NP
            (NP
              (QP (IN over) (CD 15490))
              (NNS packages))
            (PRN (-LRB- -LRB-)
              (NP
                (NP (JJ precompiled) (NN software))
                (SBAR
                  (WHNP (WDT that))
                  (S
                    (VP (VBZ is)
                      (VP (VBN bundled)
                        (PRT (RP up))
                        (PP (IN in)
                          (NP
                            (NP (DT a) (JJ nice) (NN format))
                            (PP (IN for)
                              (NP (JJ easy) (NN installation)))))
                        (PP (IN on)
                          (NP (PRP$ your) (NN machine))))))))
              (-RRB- -RRB-))))))
    (: -)
    (S
      (NP
        (NP (DT all))
        (PP (IN of)
          (NP (PRP it))))
      (ADJP (JJ free)))
    (. .)))


* DEBUG: Imprimiendo salida en formato latexTree

.[
ROOT
  S
    S
      NP
        NNP
          Debian
      VP
        VBZ
          comes
        PP
          IN
            with
          NP
            NP
              QP
                IN
                  over
                CD
                  15490
              NNS
                packages
            PRN
              -LRB-
                -LRB-
              NP
                NP
                  JJ
                    precompiled
                  NN
                    software
                SBAR
                  WHNP
                    WDT
                      that
                  S
                    VP
                      VBZ
                        is
                      VP
                        VBN
                          bundled
                        PRT
                          RP
                            up
                        PP
                          IN
                            in
                          NP
                            NP
                              DT
                                a
                              JJ
                                nice
                              NN
                                format
                            PP
                              IN
                                for
                              NP
                                JJ
                                  easy
                                NN
                                  installation
                        PP
                          IN
                            on
                          NP
                            PRP$
                              your
                            NN
                              machine
              -RRB-
                -RRB-
    :
      -
    S
      NP
        NP
          DT
            all
        PP
          IN
            of
          NP
            PRP
              it
      ADJP
        JJ
          free
    .
      .
.]

* DEBUG: Imprimiendo salida en formato words

Debian comes with over 15490 packages -LRB- precompiled software that is bundled up in a nice format for easy installation on your machine -RRB- - all of it free .


* DEBUG: Imprimiendo salida en formato wordsAndTags

Debian/NNP comes/VBZ with/IN over/IN 15490/CD packages/NNS -LRB-/-LRB- precompiled/JJ software/NN that/WDT is/VBZ bundled/VBN up/RP in/IN a/DT nice/JJ format/NN for/IN easy/JJ installation/NN on/IN your/PRP$ machine/NN -RRB-/-RRB- -/: all/DT of/IN it/PRP free/JJ ./.


* DEBUG: Imprimiendo salida en formato rootSymbolOnly

ROOT

* DEBUG: Imprimiendo salida en formato dependencies

dep(comes-2,Debian-1)
dep(comes-2,with-3)
dep(packages-6,over-4)
dep(over-4,15490-5)
dep(with-3,packages-6)
dep(software-9,precompiled-8)
dep(-LRB--7,software-9)
dep(software-9,that-10)
dep(that-10,is-11)
dep(is-11,bundled-12)
dep(bundled-12,up-13)
dep(bundled-12,in-14)
dep(format-17,a-15)
dep(format-17,nice-16)
dep(in-14,format-17)
dep(format-17,for-18)
dep(installation-20,easy-19)
dep(for-18,installation-20)
dep(bundled-12,on-21)
dep(machine-23,your-22)
dep(on-21,machine-23)
dep(free-29,all-26)
dep(all-26,of-27)
dep(of-27,it-28)
dep(comes-2,free-29)


* DEBUG: Imprimiendo salida en formato typedDependencies

nsubj(comes-2, Debian-1)
prep(comes-2, with-3)
dep(15490-5, over-4)
num(packages-6, 15490-5)
pobj(with-3, packages-6)
amod(software-9, precompiled-8)
dep(packages-6, software-9)
nsubjpass(bundled-12, that-10)
auxpass(bundled-12, is-11)
rcmod(software-9, bundled-12)
prt(bundled-12, up-13)
prep(bundled-12, in-14)
det(format-17, a-15)
amod(format-17, nice-16)
pobj(in-14, format-17)
prep(format-17, for-18)
amod(installation-20, easy-19)
pobj(for-18, installation-20)
prep(bundled-12, on-21)
poss(machine-23, your-22)
pobj(on-21, machine-23)
dep(free-29, all-26)
prep(all-26, of-27)
pobj(of-27, it-28)
dep(comes-2, free-29)



* DEBUG: Imprimiendo salida en formato typedDependenciesCollapsed

nsubj(comes-2, Debian-1)
dep(15490-5, over-4)
num(packages-6, 15490-5)
prep_with(comes-2, packages-6)
amod(software-9, precompiled-8)
dep(packages-6, software-9)
nsubjpass(bundled-12, that-10)
auxpass(bundled-12, is-11)
rcmod(software-9, bundled-12)
prt(bundled-12, up-13)
det(format-17, a-15)
amod(format-17, nice-16)
prep_in(bundled-12, format-17)
amod(installation-20, easy-19)
prep_for(format-17, installation-20)
poss(machine-23, your-22)
prep_on(bundled-12, machine-23)
dep(free-29, all-26)
prep_of(all-26, it-28)
dep(comes-2, free-29)


* DEBUG: Parseando frase 15 de 19

[nsubj(bit-4, It-1), cop(bit-4, 's-2), det(bit-4, a-3), det(tower-7, a-6), prep_like(bit-4, tower-7)]

* DEBUG: Imprimiendo salida en formato oneline

(ROOT (S (NP (PRP It)) (VP (VBZ 's) (NP (NP (DT a) (NN bit)) (PP (IN like) (NP (DT a) (NN tower))))) (. .)))

* DEBUG: Imprimiendo salida en formato penn

(ROOT
  (S
    (NP (PRP It))
    (VP (VBZ 's)
      (NP
        (NP (DT a) (NN bit))
        (PP (IN like)
          (NP (DT a) (NN tower)))))
    (. .)))


* DEBUG: Imprimiendo salida en formato latexTree

.[
ROOT
  S
    NP
      PRP
        It
    VP
      VBZ
        's
      NP
        NP
          DT
            a
          NN
            bit
        PP
          IN
            like
          NP
            DT
              a
            NN
              tower
    .
      .
.]

* DEBUG: Imprimiendo salida en formato words

It 's a bit like a tower .


* DEBUG: Imprimiendo salida en formato wordsAndTags

It/PRP 's/VBZ a/DT bit/NN like/IN a/DT tower/NN ./.


* DEBUG: Imprimiendo salida en formato rootSymbolOnly

ROOT

* DEBUG: Imprimiendo salida en formato dependencies

dep('s-2,It-1)
dep(bit-4,a-3)
dep('s-2,bit-4)
dep(bit-4,like-5)
dep(tower-7,a-6)
dep(like-5,tower-7)


* DEBUG: Imprimiendo salida en formato typedDependencies

nsubj(bit-4, It-1)
cop(bit-4, 's-2)
det(bit-4, a-3)
prep(bit-4, like-5)
det(tower-7, a-6)
pobj(like-5, tower-7)



* DEBUG: Imprimiendo salida en formato typedDependenciesCollapsed

nsubj(bit-4, It-1)
cop(bit-4, 's-2)
det(bit-4, a-3)
det(tower-7, a-6)
prep_like(bit-4, tower-7)


* DEBUG: Parseando frase 16 de 19

[advmod(kernel-6, At-1), det(base-3, the-2), nsubj(kernel-6, base-3), cop(kernel-6, is-4), det(kernel-6, the-5)]

* DEBUG: Imprimiendo salida en formato oneline

(ROOT (S (ADVP (IN At)) (NP (DT the) (NN base)) (VP (VBZ is) (NP (DT the) (NN kernel))) (. .)))

* DEBUG: Imprimiendo salida en formato penn

(ROOT
  (S
    (ADVP (IN At))
    (NP (DT the) (NN base))
    (VP (VBZ is)
      (NP (DT the) (NN kernel)))
    (. .)))


* DEBUG: Imprimiendo salida en formato latexTree

.[
ROOT
  S
    ADVP
      IN
        At
    NP
      DT
        the
      NN
        base
    VP
      VBZ
        is
      NP
        DT
          the
        NN
          kernel
    .
      .
.]

* DEBUG: Imprimiendo salida en formato words

At the base is the kernel .


* DEBUG: Imprimiendo salida en formato wordsAndTags

At/IN the/DT base/NN is/VBZ the/DT kernel/NN ./.


* DEBUG: Imprimiendo salida en formato rootSymbolOnly

ROOT

* DEBUG: Imprimiendo salida en formato dependencies

dep(is-4,At-1)
dep(base-3,the-2)
dep(is-4,base-3)
dep(kernel-6,the-5)
dep(is-4,kernel-6)


* DEBUG: Imprimiendo salida en formato typedDependencies

advmod(kernel-6, At-1)
det(base-3, the-2)
nsubj(kernel-6, base-3)
cop(kernel-6, is-4)
det(kernel-6, the-5)



* DEBUG: Imprimiendo salida en formato typedDependenciesCollapsed

advmod(kernel-6, At-1)
det(base-3, the-2)
nsubj(kernel-6, base-3)
cop(kernel-6, is-4)
det(kernel-6, the-5)


* DEBUG: Parseando frase 17 de 19

[dep(top-2, On-1), nsubj(tools-9, top-2), prep_of(top-2, that-4), cop(tools-9, are-5), predet(tools-9, all-6), det(tools-9, the-7), amod(tools-9, basic-8)]

* DEBUG: Imprimiendo salida en formato oneline

(ROOT (S (NP (NP (IN On) (JJ top)) (PP (IN of) (NP (DT that)))) (VP (VBP are) (NP (PDT all) (DT the) (JJ basic) (NNS tools))) (. .)))

* DEBUG: Imprimiendo salida en formato penn

(ROOT
  (S
    (NP
      (NP (IN On) (JJ top))
      (PP (IN of)
        (NP (DT that))))
    (VP (VBP are)
      (NP (PDT all) (DT the) (JJ basic) (NNS tools)))
    (. .)))


* DEBUG: Imprimiendo salida en formato latexTree

.[
ROOT
  S
    NP
      NP
        IN
          On
        JJ
          top
      PP
        IN
          of
        NP
          DT
            that
    VP
      VBP
        are
      NP
        PDT
          all
        DT
          the
        JJ
          basic
        NNS
          tools
    .
      .
.]

* DEBUG: Imprimiendo salida en formato words

On top of that are all the basic tools .


* DEBUG: Imprimiendo salida en formato wordsAndTags

On/IN top/JJ of/IN that/DT are/VBP all/PDT the/DT basic/JJ tools/NNS ./.


* DEBUG: Imprimiendo salida en formato rootSymbolOnly

ROOT

* DEBUG: Imprimiendo salida en formato dependencies

dep(top-2,On-1)
dep(are-5,top-2)
dep(top-2,of-3)
dep(of-3,that-4)
dep(tools-9,all-6)
dep(tools-9,the-7)
dep(tools-9,basic-8)
dep(are-5,tools-9)


* DEBUG: Imprimiendo salida en formato typedDependencies

dep(top-2, On-1)
nsubj(tools-9, top-2)
prep(top-2, of-3)
pobj(of-3, that-4)
cop(tools-9, are-5)
predet(tools-9, all-6)
det(tools-9, the-7)
amod(tools-9, basic-8)



* DEBUG: Imprimiendo salida en formato typedDependenciesCollapsed

dep(top-2, On-1)
nsubj(tools-9, top-2)
prep_of(top-2, that-4)
cop(tools-9, are-5)
predet(tools-9, all-6)
det(tools-9, the-7)
amod(tools-9, basic-8)


* DEBUG: Parseando frase 18 de 19

[nsubj(software-5, Next-1), cop(software-5, is-2), predet(software-5, all-3), det(software-5, the-4), complm(run-8, that-6), nsubj(run-8, you-7), rcmod(software-5, run-8), det(computer-11, the-10), prep_on(run-8, computer-11)]

* DEBUG: Imprimiendo salida en formato oneline

(ROOT (S (NP (NNP Next)) (VP (VBZ is) (NP (PDT all) (DT the) (NN software)) (SBAR (IN that) (S (NP (PRP you)) (VP (VBP run) (PP (IN on) (NP (DT the) (NN computer))))))) (. .)))

* DEBUG: Imprimiendo salida en formato penn

(ROOT
  (S
    (NP (NNP Next))
    (VP (VBZ is)
      (NP (PDT all) (DT the) (NN software))
      (SBAR (IN that)
        (S
          (NP (PRP you))
          (VP (VBP run)
            (PP (IN on)
              (NP (DT the) (NN computer)))))))
    (. .)))


* DEBUG: Imprimiendo salida en formato latexTree

.[
ROOT
  S
    NP
      NNP
        Next
    VP
      VBZ
        is
      NP
        PDT
          all
        DT
          the
        NN
          software
      SBAR
        IN
          that
        S
          NP
            PRP
              you
          VP
            VBP
              run
            PP
              IN
                on
              NP
                DT
                  the
                NN
                  computer
    .
      .
.]

* DEBUG: Imprimiendo salida en formato words

Next is all the software that you run on the computer .


* DEBUG: Imprimiendo salida en formato wordsAndTags

Next/NNP is/VBZ all/PDT the/DT software/NN that/IN you/PRP run/VBP on/IN the/DT computer/NN ./.


* DEBUG: Imprimiendo salida en formato rootSymbolOnly

ROOT

* DEBUG: Imprimiendo salida en formato dependencies

dep(is-2,Next-1)
dep(software-5,all-3)
dep(software-5,the-4)
dep(is-2,software-5)
dep(is-2,that-6)
dep(run-8,you-7)
dep(that-6,run-8)
dep(run-8,on-9)
dep(computer-11,the-10)
dep(on-9,computer-11)


* DEBUG: Imprimiendo salida en formato typedDependencies

nsubj(software-5, Next-1)
cop(software-5, is-2)
predet(software-5, all-3)
det(software-5, the-4)
complm(run-8, that-6)
nsubj(run-8, you-7)
rcmod(software-5, run-8)
prep(run-8, on-9)
det(computer-11, the-10)
pobj(on-9, computer-11)



* DEBUG: Imprimiendo salida en formato typedDependenciesCollapsed

nsubj(software-5, Next-1)
cop(software-5, is-2)
predet(software-5, all-3)
det(software-5, the-4)
complm(run-8, that-6)
nsubj(run-8, you-7)
rcmod(software-5, run-8)
det(computer-11, the-10)
prep_on(run-8, computer-11)


* DEBUG: Parseando frase 19 de 19

[det(top-3, the-2), prep_at(Debian-8, top-3), det(tower-6, the-5), prep_of(top-3, tower-6), cop(Debian-8, is-7), advmod(organizing-11, carefully-10), dep(Debian-8, organizing-11), conj_and(organizing-11, fitting-13), nsubj(Debian-8, everything-14), mark(works-18, so-15), nsubj(works-18, it-16), advmod(works-18, all-17), dep(everything-14, works-18), advmod(works-18, together-19)]

* DEBUG: Imprimiendo salida en formato oneline

(ROOT (SINV (PP (IN At) (NP (NP (DT the) (NN top)) (PP (IN of) (NP (DT the) (NN tower))))) (VP (VBZ is) (NP (NNP Debian)) (: -) (FRAG (ADJP (RB carefully) (JJ organizing) (CC and) (JJ fitting)))) (NP (NN everything) (SBAR (IN so) (S (NP (PRP it)) (ADVP (DT all)) (VP (VBZ works) (ADVP (RB together)))))) (. .)))

* DEBUG: Imprimiendo salida en formato penn

(ROOT
  (SINV
    (PP (IN At)
      (NP
        (NP (DT the) (NN top))
        (PP (IN of)
          (NP (DT the) (NN tower)))))
    (VP (VBZ is)
      (NP (NNP Debian))
      (: -)
      (FRAG
        (ADJP (RB carefully) (JJ organizing)
          (CC and)
          (JJ fitting))))
    (NP (NN everything)
      (SBAR (IN so)
        (S
          (NP (PRP it))
          (ADVP (DT all))
          (VP (VBZ works)
            (ADVP (RB together))))))
    (. .)))


* DEBUG: Imprimiendo salida en formato latexTree

.[
ROOT
  SINV
    PP
      IN
        At
      NP
        NP
          DT
            the
          NN
            top
        PP
          IN
            of
          NP
            DT
              the
            NN
              tower
    VP
      VBZ
        is
      NP
        NNP
          Debian
      :
        -
      FRAG
        ADJP
          RB
            carefully
          JJ
            organizing
          CC
            and
          JJ
            fitting
    NP
      NN
        everything
      SBAR
        IN
          so
        S
          NP
            PRP
              it
          ADVP
            DT
              all
          VP
            VBZ
              works
            ADVP
              RB
                together
    .
      .
.]

* DEBUG: Imprimiendo salida en formato words

At the top of the tower is Debian - carefully organizing and fitting everything so it all works together .


* DEBUG: Imprimiendo salida en formato wordsAndTags

At/IN the/DT top/NN of/IN the/DT tower/NN is/VBZ Debian/NNP -/: carefully/RB organizing/JJ and/CC fitting/JJ everything/NN so/IN it/PRP all/DT works/VBZ together/RB ./.


* DEBUG: Imprimiendo salida en formato rootSymbolOnly

ROOT

* DEBUG: Imprimiendo salida en formato dependencies

dep(is-7,At-1)
dep(top-3,the-2)
dep(At-1,top-3)
dep(top-3,of-4)
dep(tower-6,the-5)
dep(of-4,tower-6)
dep(is-7,Debian-8)
dep(organizing-11,carefully-10)
dep(is-7,organizing-11)
dep(organizing-11,and-12)
dep(organizing-11,fitting-13)
dep(is-7,everything-14)
dep(everything-14,so-15)
dep(works-18,it-16)
dep(works-18,all-17)
dep(so-15,works-18)
dep(works-18,together-19)


* DEBUG: Imprimiendo salida en formato typedDependencies

dep(Debian-8, At-1)
det(top-3, the-2)
pobj(At-1, top-3)
prep(top-3, of-4)
det(tower-6, the-5)
pobj(of-4, tower-6)
cop(Debian-8, is-7)
advmod(organizing-11, carefully-10)
dep(Debian-8, organizing-11)
cc(organizing-11, and-12)
conj(organizing-11, fitting-13)
nsubj(Debian-8, everything-14)
mark(works-18, so-15)
nsubj(works-18, it-16)
advmod(works-18, all-17)
dep(everything-14, works-18)
advmod(works-18, together-19)



* DEBUG: Imprimiendo salida en formato typedDependenciesCollapsed

det(top-3, the-2)
prep_at(Debian-8, top-3)
det(tower-6, the-5)
prep_of(top-3, tower-6)
cop(Debian-8, is-7)
advmod(organizing-11, carefully-10)
dep(Debian-8, organizing-11)
conj_and(organizing-11, fitting-13)
nsubj(Debian-8, everything-14)
mark(works-18, so-15)
nsubj(works-18, it-16)
advmod(works-18, all-17)
dep(everything-14, works-18)
advmod(works-18, together-19)

